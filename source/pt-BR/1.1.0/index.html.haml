---
description: Mantenha um Changelog
title: Mantenha um Changelog
language: pt-BR
version: 1.1.0
---
.header
  .title
    %h1 Mantenha um Changelog
    %h2 Não deixe seus amigos despejarem logs de commits no Changelog

  = link_to data.links.changelog do
    Version
    %strong= current_page.metadata[:page][:version]

  %pre.changelog{ lang: "en" }= File.read("CHANGELOG.md")

.answers
  %h3#what
    %a.anchor{ href: "#what", aria_hidden: "true" }
    O que é um changelog?

  %p
    Um changelog é um arquivo que contém uma lista selecionada, ordenada
    cronologicamente, de mudanças significativas para cada versão de um projeto.

  %h3#why
    %a.anchor{ href: "#why", aria_hidden: "true" }
    Por que manter um changelog?

  %p
    Para facilitar que usuários e contribuidores vejam precisamente quais
    mudanças significativas foram realizadas entre cada versão publicada de
    um projeto.

  %h3#who
    %a.anchor{ href: "#who", aria_hidden: "true" }
    Quem precisa de um changelog?

  %p
    Pessoas precisam. Seja consumidores ou desenvolvedores,
    os usuários finais de softwares são seres humanos
    que se preocupam com o que está no software. Quando
    o software muda, as pessoas querem saber por que e como.

.good-practices
  %h3#how
    %a.anchor{ href: "#how", aria_hidden: "true" }
    Como fazer um bom changelog?

  %h4#principles
    %a.anchor{ href: "#principles", aria_hidden: "true" }
    Princípios fundamentais

  %ul
    %li
      Changelogs são <em>para humanos</em>, não máquinas.
    %li
      Deve haver uma entrada para cada versão.
    %li
      Alterações do mesmo tipo devem ser agrupadas.
    %li
      Versões e seções devem ser vinculáveis (com links).
    %li
      A versão mais recente vem em primeiro lugar.
    %li
      A data de lançamento de cada versão é exibida.
    %li
      Mencione se você segue o #{link_to "versionamento semântico", data.links.semver}.

  %a.anchor{ href: "#types", aria_hidden: "true" }
  %h4#types Tipos de mudanças

  %ul
    %li
      %code Added
      para novos recursos.
    %li
      %code Changed
      para alterações em funcionalidades existentes.
    %li
      %code Deprecated
      para recursos que serão removidos nas próximas versões.
    %li
      %code Removed
      para recursos removidos nesta versão.
    %li
      %code Fixed
      para qualquer correção de bug.
    %li
      %code Security
      em caso de vulnerabilidades.

.effort

  %h3#effort
    %a.anchor{ href: "#effort", aria_hidden: "true" }
    Como eu posso minimizar o esforço exigido para manter um changelog?

  %p
    Mantenha sempre uma seção <code>Unreleased</code>(Não publicado) no topo para manter o controle das novas mudanças.

  %p Isso serve a dois propósitos:

  %ul
    %li
      As pessoas podem ver quais mudanças elas podem esperar em publicações futuras.
    %li
      No momento da publicação, você apenas tem de mudar a seção
      <code>Unreleased</code> para o número de versão e adicionar uma
      nova seção <code>Unreleased/Não publicado</code> no topo.

.bad-practices
  %h3#bad-practices
    %a.anchor{ href: "#bad-practices", aria_hidden: "true" }
    Os changelogs podem ser ruins?

  %p Sim. Aqui estão algumas maneiras pelas quais eles podem ser inúteis.

  %h4#log-diffs
    %a.anchor{ href: "#log-diffs", aria_hidden: "true" }
    Usar um registrador de alterações automático

  %p
    Usar um registrador de alterações automático é uma má ideia: eles estão
    cheios de bagunça. Coisas como solicitação de mesclagem, envio com títulos
    estranhos, alterações de documentação, etc.

  %p
    O propósito de um commit é documentar a etapa na evolução do código
    fonte. Alguns projetos limpam os commits, outros não.

  %p
    O propósito em um registro de changelog é documentar as diferenças
    notáveis, muitas vezes de múltiplos commits, para comunicar de forma
    clara os usuários.

  %h4#ignoring-deprecations
    %a.anchor{ href: "#ignoring-deprecations", aria_hidden: "true" }
    Ignoring Deprecations

  %p
    When people upgrade from one version to another, it should be
    painfully clear when something will break. It should be possible to
    upgrade to a version that lists deprecations, remove what's
    deprecated, then upgrade to the version where the deprecations
    become removals.

  %p
    If you do nothing else, list deprecations, removals, and any
    breaking changes in your changelog.


  %h4#confusing-dates
    %a.anchor{ href: "#confusing-dates", aria_hidden: "true" }
    Confusing Dates

  %p
    Regional date formats vary throughout the world and it's often
    difficult to find a human-friendly date format that feels intuitive
    to everyone. The advantage of dates formatted like
    <code>2017-07-17</code> is that they follow the order of largest to
    smallest units: year, month, and day. This format also doesn't
    overlap in ambiguous ways with other date formats, unlike some
    regional formats that switch the position of month and day numbers.
    These reasons, and the fact this date format is an
    #{link_to "ISO standard", data.links.isodate}, are why it is the recommended date
    format for changelog entries.

  %h4#inconsistent-changes
    %a.anchor{ href: "#inconsistent-changes", aria_hidden: "true" }
    Inconsistent Changes

  %p
    A changelog which only mentions some of the changes can be as dangerous
    as not having a changelog. While many of the changes may not be
    relevant - for instance, removing a single whitespace may not need
    to be recorded in all instances - any important changes should be
    mentioned in the changelog. By inconsistently applying changes,
    your users may mistakenly think that the changelog is the single source
    of truth. It ought to be. With great power comes great responsibility -
    having a good changelog means having a consistently updated changelog.

  %aside
    There’s more. Help me collect these antipatterns by
    = link_to "opening an issue", data.links.issue
    or a pull request.

.frequently-asked-questions
  %h3#frequently-asked-questions
    %a.anchor{ href: "#frequently-asked-questions", aria_hidden: "true" }
    Frequently Asked Questions

  %h4#standard
    %a.anchor{ href: "#standard", aria_hidden: "true" }
    Is there a standard changelog format?

  %p
    Not really. There's the #{link_to "GNU changelog style guide", data.links.gnustyle},
    or the #{link_to "two-paragraph-long GNU NEWS file", data.links.gnunews}
    "guideline". Both are inadequate or insufficient.

  %p
    This project aims to be
    = link_to "a better changelog convention.", data.links.changelog
    It comes from observing good practices in the open source
    community and gathering them.

  %p
    Healthy criticism, discussion and suggestions for improvements
    = link_to "are welcome.", data.links.issue


  %h4#filename
    %a.anchor{ href: "#filename", aria_hidden: "true" }
    What should the changelog file be named?

  %p
    Call it <code>CHANGELOG.md</code>. Some projects use
    <code>HISTORY</code>, <code>NEWS</code> or <code>RELEASES</code>.

  %p
    While it's easy to think that the name of your changelog file
    doesn't matter that much, why make it harder for your end users to
    consistently find notable changes?

  %h4#github-releases
    %a.anchor{ href: "#github-releases", aria_hidden: "true" }
    What about GitHub Releases?

  %p
    It's a great initiative. #{link_to "Releases", data.links.github_releases} can be used to
    turn simple git tags (for example a tag named <code>v1.0.0</code>)
    into rich release notes by manually adding release notes or it can
    pull annotated git tag messages and turn them into notes.

  %p
    GitHub Releases create a non-portable changelog that can only be
    displayed to users within the context of GitHub. It's possible to
    make them look very much like the Keep a Changelog format, but it
    tends to be a bit more involved.

  %p
    The current version of GitHub releases is also arguably not very
    discoverable by end-users, unlike the typical uppercase files
    (<code>README</code>, <code>CONTRIBUTING</code>, etc.). Another
    minor issue is that the interface doesn't currently offer links to
    commit logs between each release.

  %h4#automatic
    %a.anchor{ href: "#automatic", aria_hidden: "true" }
    Can changelogs be automatically parsed?

  %p
    It’s difficult, because people follow wildly different formats and
    file names.

  %p
    #{link_to "Vandamme", data.links.vandamme} is a Ruby gem created by the
    Gemnasium team and which parses many (but
    not all) open source project changelogs.


  %h4#yanked
    %a.anchor{ href: "#yanked", aria_hidden: "true" }
    What about yanked releases?

  %p
    Yanked releases are versions that had to be pulled because of a
    serious bug or security issue. Often these versions don't even
    appear in change logs. They should. This is how you should display
    them:

  %p <code>## [0.0.5] - 2014-12-13 [YANKED]</code>

  %p
    The <code>[YANKED]</code> tag is loud for a reason. It's important
    for people to notice it. Since it's surrounded by brackets it's also
    easier to parse programmatically.


  %h4#rewrite
    %a.anchor{ href: "#rewrite", aria_hidden: "true" }
    Should you ever rewrite a changelog?

  %p
    Sure. There are always good reasons to improve a changelog. I
    regularly open pull requests to add missing releases to open source
    projects with unmaintained changelogs.

  %p
    It's also possible you may discover that you forgot to address a
    breaking change in the notes for a version. It's obviously important
    for you to update your changelog in this case.


  %h4#contribute
    %a.anchor{ href: "#contribute", aria_hidden: "true" }
    How can I contribute?

  %p
    This document is not the <strong>truth</strong>; it’s my carefully
    considered opinion, along with information and examples I gathered.

  %p
    This is because I want our community to reach a consensus. I believe
    the discussion is as important as the end result.

  %p
    So please <strong>#{link_to "pitch in", data.links.repo}</strong>.

.press
  %h3 Conversations
  %p
    I went on #{link_to "The Changelog podcast", data.links.thechangelog}
    to talk about why maintainers and contributors should care about changelogs,
    and also about the motivations behind this project.
